Terminals which are not used

   ASSIGN
   AND
   OR


State 36 conflicts: 10 shift/reduce
State 89 conflicts: 4 shift/reduce


Grammar

    0 $accept: program $end

    1 program: headers main '(' ')' '{' body return '}'

    2 headers: headers INCLUDE

    3 @1: /* empty */

    4 headers: INCLUDE @1

    5 main: datatype ID

    6 datatype: INT
    7         | VOID
    8         | FLOAT
    9         | CHAR

   10 @2: /* empty */

   11 @3: /* empty */

   12 @4: /* empty */

   13 body: IF @2 '(' condition ')' @3 '{' body '}' @4 else

   14 @5: /* empty */

   15 body: FOR @5 '(' statement ';' condition ';' statement ')' '{' body '}'
   16     | body body

   17 @6: /* empty */

   18 body: PRINTFF @6 '(' STR ')' ';'
   19     | statement ';'

   20 @7: /* empty */

   21 body: SCANFF @7 '(' STR ',' '&' ID ')' ';'

   22 @8: /* empty */

   23 else: ELSE @8 '{' body '}'
   24     | /* empty */

   25 condition: value relop value
   26          | TRUE
   27          | FALSE
   28          | /* empty */

   29 @9: /* empty */

   30 statement: datatype ID @9 init

   31 @10: /* empty */

   32 statement: ID @10 '=' expression

   33 @11: /* empty */

   34 statement: ID @11 relop expression

   35 @12: /* empty */

   36 statement: ID @12 UNARY
   37          | UNARY ID

   38 init: '=' value
   39     | /* empty */

   40 expression: expression arithmetic expression
   41           | value

   42 arithmetic: ADD
   43           | SUBTRACT
   44           | MULTIPLY
   45           | DIVIDE

   46 relop: LT
   47      | GT
   48      | LE
   49      | GE
   50      | EQ
   51      | NE

   52 value: NUMBER
   53      | FLOAT_NUM
   54      | CHARACTER
   55      | ID

   56 @13: /* empty */

   57 return: RETURN @13 value ';'
   58       | /* empty */


Terminals, with rules where they appear

$end (0) 0
'&' (38) 21
'(' (40) 1 13 15 18 21
')' (41) 1 13 15 18 21
',' (44) 21
';' (59) 15 18 19 21 57
'=' (61) 32 38
'{' (123) 1 13 15 23
'}' (125) 1 13 15 23
error (256)
SUBTRACT (258) 43
ADD (259) 42
DIVIDE (260) 45
MULTIPLY (261) 44
NE (262) 51
EQ (263) 50
GE (264) 49
GT (265) 47
LE (266) 48
LT (267) 46
ASSIGN (268)
VOID (269) 7
CHARACTER (270) 54
PRINTFF (271) 18
SCANFF (272) 21
INT (273) 6
FLOAT (274) 8
CHAR (275) 9
FOR (276) 15
IF (277) 13
ELSE (278) 23
TRUE (279) 26
FALSE (280) 27
NUMBER (281) 52
FLOAT_NUM (282) 53
ID (283) 5 21 30 32 34 36 37 55
AND (284)
OR (285)
STR (286) 18 21
UNARY (287) 36 37
INCLUDE (288) 2 4
RETURN (289) 57


Nonterminals, with rules where they appear

$accept (43)
    on left: 0
program (44)
    on left: 1, on right: 0
headers (45)
    on left: 2 4, on right: 1 2
@1 (46)
    on left: 3, on right: 4
main (47)
    on left: 5, on right: 1
datatype (48)
    on left: 6 7 8 9, on right: 5 30
body (49)
    on left: 13 15 16 18 19 21, on right: 1 13 15 16 23
@2 (50)
    on left: 10, on right: 13
@3 (51)
    on left: 11, on right: 13
@4 (52)
    on left: 12, on right: 13
@5 (53)
    on left: 14, on right: 15
@6 (54)
    on left: 17, on right: 18
@7 (55)
    on left: 20, on right: 21
else (56)
    on left: 23 24, on right: 13
@8 (57)
    on left: 22, on right: 23
condition (58)
    on left: 25 26 27 28, on right: 13 15
statement (59)
    on left: 30 32 34 36 37, on right: 15 19
@9 (60)
    on left: 29, on right: 30
@10 (61)
    on left: 31, on right: 32
@11 (62)
    on left: 33, on right: 34
@12 (63)
    on left: 35, on right: 36
init (64)
    on left: 38 39, on right: 30
expression (65)
    on left: 40 41, on right: 32 34 40
arithmetic (66)
    on left: 42 43 44 45, on right: 40
relop (67)
    on left: 46 47 48 49 50 51, on right: 25 34
value (68)
    on left: 52 53 54 55, on right: 25 38 41 57
return (69)
    on left: 57 58, on right: 1
@13 (70)
    on left: 56, on right: 57


state 0

    0 $accept: . program $end

    INCLUDE  shift, and go to state 1

    program  go to state 2
    headers  go to state 3


state 1

    4 headers: INCLUDE . @1

    $default  reduce using rule 3 (@1)

    @1  go to state 4


state 2

    0 $accept: program . $end

    $end  shift, and go to state 5


state 3

    1 program: headers . main '(' ')' '{' body return '}'
    2 headers: headers . INCLUDE

    VOID     shift, and go to state 6
    INT      shift, and go to state 7
    FLOAT    shift, and go to state 8
    CHAR     shift, and go to state 9
    INCLUDE  shift, and go to state 10

    main      go to state 11
    datatype  go to state 12


state 4

    4 headers: INCLUDE @1 .

    $default  reduce using rule 4 (headers)


state 5

    0 $accept: program $end .

    $default  accept


state 6

    7 datatype: VOID .

    $default  reduce using rule 7 (datatype)


state 7

    6 datatype: INT .

    $default  reduce using rule 6 (datatype)


state 8

    8 datatype: FLOAT .

    $default  reduce using rule 8 (datatype)


state 9

    9 datatype: CHAR .

    $default  reduce using rule 9 (datatype)


state 10

    2 headers: headers INCLUDE .

    $default  reduce using rule 2 (headers)


state 11

    1 program: headers main . '(' ')' '{' body return '}'

    '('  shift, and go to state 13


state 12

    5 main: datatype . ID

    ID  shift, and go to state 14


state 13

    1 program: headers main '(' . ')' '{' body return '}'

    ')'  shift, and go to state 15


state 14

    5 main: datatype ID .

    $default  reduce using rule 5 (main)


state 15

    1 program: headers main '(' ')' . '{' body return '}'

    '{'  shift, and go to state 16


state 16

    1 program: headers main '(' ')' '{' . body return '}'

    VOID     shift, and go to state 6
    PRINTFF  shift, and go to state 17
    SCANFF   shift, and go to state 18
    INT      shift, and go to state 7
    FLOAT    shift, and go to state 8
    CHAR     shift, and go to state 9
    FOR      shift, and go to state 19
    IF       shift, and go to state 20
    ID       shift, and go to state 21
    UNARY    shift, and go to state 22

    datatype   go to state 23
    body       go to state 24
    statement  go to state 25


state 17

   18 body: PRINTFF . @6 '(' STR ')' ';'

    $default  reduce using rule 17 (@6)

    @6  go to state 26


state 18

   21 body: SCANFF . @7 '(' STR ',' '&' ID ')' ';'

    $default  reduce using rule 20 (@7)

    @7  go to state 27


state 19

   15 body: FOR . @5 '(' statement ';' condition ';' statement ')' '{' body '}'

    $default  reduce using rule 14 (@5)

    @5  go to state 28


state 20

   13 body: IF . @2 '(' condition ')' @3 '{' body '}' @4 else

    $default  reduce using rule 10 (@2)

    @2  go to state 29


state 21

   32 statement: ID . @10 '=' expression
   34          | ID . @11 relop expression
   36          | ID . @12 UNARY

    UNARY     reduce using rule 35 (@12)
    '='       reduce using rule 31 (@10)
    $default  reduce using rule 33 (@11)

    @10  go to state 30
    @11  go to state 31
    @12  go to state 32


state 22

   37 statement: UNARY . ID

    ID  shift, and go to state 33


state 23

   30 statement: datatype . ID @9 init

    ID  shift, and go to state 34


state 24

    1 program: headers main '(' ')' '{' body . return '}'
   16 body: body . body

    VOID     shift, and go to state 6
    PRINTFF  shift, and go to state 17
    SCANFF   shift, and go to state 18
    INT      shift, and go to state 7
    FLOAT    shift, and go to state 8
    CHAR     shift, and go to state 9
    FOR      shift, and go to state 19
    IF       shift, and go to state 20
    ID       shift, and go to state 21
    UNARY    shift, and go to state 22
    RETURN   shift, and go to state 35

    $default  reduce using rule 58 (return)

    datatype   go to state 23
    body       go to state 36
    statement  go to state 25
    return     go to state 37


state 25

   19 body: statement . ';'

    ';'  shift, and go to state 38


state 26

   18 body: PRINTFF @6 . '(' STR ')' ';'

    '('  shift, and go to state 39


state 27

   21 body: SCANFF @7 . '(' STR ',' '&' ID ')' ';'

    '('  shift, and go to state 40


state 28

   15 body: FOR @5 . '(' statement ';' condition ';' statement ')' '{' body '}'

    '('  shift, and go to state 41


state 29

   13 body: IF @2 . '(' condition ')' @3 '{' body '}' @4 else

    '('  shift, and go to state 42


state 30

   32 statement: ID @10 . '=' expression

    '='  shift, and go to state 43


state 31

   34 statement: ID @11 . relop expression

    NE  shift, and go to state 44
    EQ  shift, and go to state 45
    GE  shift, and go to state 46
    GT  shift, and go to state 47
    LE  shift, and go to state 48
    LT  shift, and go to state 49

    relop  go to state 50


state 32

   36 statement: ID @12 . UNARY

    UNARY  shift, and go to state 51


state 33

   37 statement: UNARY ID .

    $default  reduce using rule 37 (statement)


state 34

   30 statement: datatype ID . @9 init

    $default  reduce using rule 29 (@9)

    @9  go to state 52


state 35

   57 return: RETURN . @13 value ';'

    $default  reduce using rule 56 (@13)

    @13  go to state 53


state 36

   16 body: body . body
   16     | body body .

    VOID     shift, and go to state 6
    PRINTFF  shift, and go to state 17
    SCANFF   shift, and go to state 18
    INT      shift, and go to state 7
    FLOAT    shift, and go to state 8
    CHAR     shift, and go to state 9
    FOR      shift, and go to state 19
    IF       shift, and go to state 20
    ID       shift, and go to state 21
    UNARY    shift, and go to state 22

    VOID      [reduce using rule 16 (body)]
    PRINTFF   [reduce using rule 16 (body)]
    SCANFF    [reduce using rule 16 (body)]
    INT       [reduce using rule 16 (body)]
    FLOAT     [reduce using rule 16 (body)]
    CHAR      [reduce using rule 16 (body)]
    FOR       [reduce using rule 16 (body)]
    IF        [reduce using rule 16 (body)]
    ID        [reduce using rule 16 (body)]
    UNARY     [reduce using rule 16 (body)]
    $default  reduce using rule 16 (body)

    datatype   go to state 23
    body       go to state 36
    statement  go to state 25


state 37

    1 program: headers main '(' ')' '{' body return . '}'

    '}'  shift, and go to state 54


state 38

   19 body: statement ';' .

    $default  reduce using rule 19 (body)


state 39

   18 body: PRINTFF @6 '(' . STR ')' ';'

    STR  shift, and go to state 55


state 40

   21 body: SCANFF @7 '(' . STR ',' '&' ID ')' ';'

    STR  shift, and go to state 56


state 41

   15 body: FOR @5 '(' . statement ';' condition ';' statement ')' '{' body '}'

    VOID   shift, and go to state 6
    INT    shift, and go to state 7
    FLOAT  shift, and go to state 8
    CHAR   shift, and go to state 9
    ID     shift, and go to state 21
    UNARY  shift, and go to state 22

    datatype   go to state 23
    statement  go to state 57


state 42

   13 body: IF @2 '(' . condition ')' @3 '{' body '}' @4 else

    CHARACTER  shift, and go to state 58
    TRUE       shift, and go to state 59
    FALSE      shift, and go to state 60
    NUMBER     shift, and go to state 61
    FLOAT_NUM  shift, and go to state 62
    ID         shift, and go to state 63

    $default  reduce using rule 28 (condition)

    condition  go to state 64
    value      go to state 65


state 43

   32 statement: ID @10 '=' . expression

    CHARACTER  shift, and go to state 58
    NUMBER     shift, and go to state 61
    FLOAT_NUM  shift, and go to state 62
    ID         shift, and go to state 63

    expression  go to state 66
    value       go to state 67


state 44

   51 relop: NE .

    $default  reduce using rule 51 (relop)


state 45

   50 relop: EQ .

    $default  reduce using rule 50 (relop)


state 46

   49 relop: GE .

    $default  reduce using rule 49 (relop)


state 47

   47 relop: GT .

    $default  reduce using rule 47 (relop)


state 48

   48 relop: LE .

    $default  reduce using rule 48 (relop)


state 49

   46 relop: LT .

    $default  reduce using rule 46 (relop)


state 50

   34 statement: ID @11 relop . expression

    CHARACTER  shift, and go to state 58
    NUMBER     shift, and go to state 61
    FLOAT_NUM  shift, and go to state 62
    ID         shift, and go to state 63

    expression  go to state 68
    value       go to state 67


state 51

   36 statement: ID @12 UNARY .

    $default  reduce using rule 36 (statement)


state 52

   30 statement: datatype ID @9 . init

    '='  shift, and go to state 69

    $default  reduce using rule 39 (init)

    init  go to state 70


state 53

   57 return: RETURN @13 . value ';'

    CHARACTER  shift, and go to state 58
    NUMBER     shift, and go to state 61
    FLOAT_NUM  shift, and go to state 62
    ID         shift, and go to state 63

    value  go to state 71


state 54

    1 program: headers main '(' ')' '{' body return '}' .

    $default  reduce using rule 1 (program)


state 55

   18 body: PRINTFF @6 '(' STR . ')' ';'

    ')'  shift, and go to state 72


state 56

   21 body: SCANFF @7 '(' STR . ',' '&' ID ')' ';'

    ','  shift, and go to state 73


state 57

   15 body: FOR @5 '(' statement . ';' condition ';' statement ')' '{' body '}'

    ';'  shift, and go to state 74


state 58

   54 value: CHARACTER .

    $default  reduce using rule 54 (value)


state 59

   26 condition: TRUE .

    $default  reduce using rule 26 (condition)


state 60

   27 condition: FALSE .

    $default  reduce using rule 27 (condition)


state 61

   52 value: NUMBER .

    $default  reduce using rule 52 (value)


state 62

   53 value: FLOAT_NUM .

    $default  reduce using rule 53 (value)


state 63

   55 value: ID .

    $default  reduce using rule 55 (value)


state 64

   13 body: IF @2 '(' condition . ')' @3 '{' body '}' @4 else

    ')'  shift, and go to state 75


state 65

   25 condition: value . relop value

    NE  shift, and go to state 44
    EQ  shift, and go to state 45
    GE  shift, and go to state 46
    GT  shift, and go to state 47
    LE  shift, and go to state 48
    LT  shift, and go to state 49

    relop  go to state 76


state 66

   32 statement: ID @10 '=' expression .
   40 expression: expression . arithmetic expression

    SUBTRACT  shift, and go to state 77
    ADD       shift, and go to state 78
    DIVIDE    shift, and go to state 79
    MULTIPLY  shift, and go to state 80

    $default  reduce using rule 32 (statement)

    arithmetic  go to state 81


state 67

   41 expression: value .

    $default  reduce using rule 41 (expression)


state 68

   34 statement: ID @11 relop expression .
   40 expression: expression . arithmetic expression

    SUBTRACT  shift, and go to state 77
    ADD       shift, and go to state 78
    DIVIDE    shift, and go to state 79
    MULTIPLY  shift, and go to state 80

    $default  reduce using rule 34 (statement)

    arithmetic  go to state 81


state 69

   38 init: '=' . value

    CHARACTER  shift, and go to state 58
    NUMBER     shift, and go to state 61
    FLOAT_NUM  shift, and go to state 62
    ID         shift, and go to state 63

    value  go to state 82


state 70

   30 statement: datatype ID @9 init .

    $default  reduce using rule 30 (statement)


state 71

   57 return: RETURN @13 value . ';'

    ';'  shift, and go to state 83


state 72

   18 body: PRINTFF @6 '(' STR ')' . ';'

    ';'  shift, and go to state 84


state 73

   21 body: SCANFF @7 '(' STR ',' . '&' ID ')' ';'

    '&'  shift, and go to state 85


state 74

   15 body: FOR @5 '(' statement ';' . condition ';' statement ')' '{' body '}'

    CHARACTER  shift, and go to state 58
    TRUE       shift, and go to state 59
    FALSE      shift, and go to state 60
    NUMBER     shift, and go to state 61
    FLOAT_NUM  shift, and go to state 62
    ID         shift, and go to state 63

    $default  reduce using rule 28 (condition)

    condition  go to state 86
    value      go to state 65


state 75

   13 body: IF @2 '(' condition ')' . @3 '{' body '}' @4 else

    $default  reduce using rule 11 (@3)

    @3  go to state 87


state 76

   25 condition: value relop . value

    CHARACTER  shift, and go to state 58
    NUMBER     shift, and go to state 61
    FLOAT_NUM  shift, and go to state 62
    ID         shift, and go to state 63

    value  go to state 88


state 77

   43 arithmetic: SUBTRACT .

    $default  reduce using rule 43 (arithmetic)


state 78

   42 arithmetic: ADD .

    $default  reduce using rule 42 (arithmetic)


state 79

   45 arithmetic: DIVIDE .

    $default  reduce using rule 45 (arithmetic)


state 80

   44 arithmetic: MULTIPLY .

    $default  reduce using rule 44 (arithmetic)


state 81

   40 expression: expression arithmetic . expression

    CHARACTER  shift, and go to state 58
    NUMBER     shift, and go to state 61
    FLOAT_NUM  shift, and go to state 62
    ID         shift, and go to state 63

    expression  go to state 89
    value       go to state 67


state 82

   38 init: '=' value .

    $default  reduce using rule 38 (init)


state 83

   57 return: RETURN @13 value ';' .

    $default  reduce using rule 57 (return)


state 84

   18 body: PRINTFF @6 '(' STR ')' ';' .

    $default  reduce using rule 18 (body)


state 85

   21 body: SCANFF @7 '(' STR ',' '&' . ID ')' ';'

    ID  shift, and go to state 90


state 86

   15 body: FOR @5 '(' statement ';' condition . ';' statement ')' '{' body '}'

    ';'  shift, and go to state 91


state 87

   13 body: IF @2 '(' condition ')' @3 . '{' body '}' @4 else

    '{'  shift, and go to state 92


state 88

   25 condition: value relop value .

    $default  reduce using rule 25 (condition)


state 89

   40 expression: expression . arithmetic expression
   40           | expression arithmetic expression .

    SUBTRACT  shift, and go to state 77
    ADD       shift, and go to state 78
    DIVIDE    shift, and go to state 79
    MULTIPLY  shift, and go to state 80

    SUBTRACT  [reduce using rule 40 (expression)]
    ADD       [reduce using rule 40 (expression)]
    DIVIDE    [reduce using rule 40 (expression)]
    MULTIPLY  [reduce using rule 40 (expression)]
    $default  reduce using rule 40 (expression)

    arithmetic  go to state 81


state 90

   21 body: SCANFF @7 '(' STR ',' '&' ID . ')' ';'

    ')'  shift, and go to state 93


state 91

   15 body: FOR @5 '(' statement ';' condition ';' . statement ')' '{' body '}'

    VOID   shift, and go to state 6
    INT    shift, and go to state 7
    FLOAT  shift, and go to state 8
    CHAR   shift, and go to state 9
    ID     shift, and go to state 21
    UNARY  shift, and go to state 22

    datatype   go to state 23
    statement  go to state 94


state 92

   13 body: IF @2 '(' condition ')' @3 '{' . body '}' @4 else

    VOID     shift, and go to state 6
    PRINTFF  shift, and go to state 17
    SCANFF   shift, and go to state 18
    INT      shift, and go to state 7
    FLOAT    shift, and go to state 8
    CHAR     shift, and go to state 9
    FOR      shift, and go to state 19
    IF       shift, and go to state 20
    ID       shift, and go to state 21
    UNARY    shift, and go to state 22

    datatype   go to state 23
    body       go to state 95
    statement  go to state 25


state 93

   21 body: SCANFF @7 '(' STR ',' '&' ID ')' . ';'

    ';'  shift, and go to state 96


state 94

   15 body: FOR @5 '(' statement ';' condition ';' statement . ')' '{' body '}'

    ')'  shift, and go to state 97


state 95

   13 body: IF @2 '(' condition ')' @3 '{' body . '}' @4 else
   16     | body . body

    VOID     shift, and go to state 6
    PRINTFF  shift, and go to state 17
    SCANFF   shift, and go to state 18
    INT      shift, and go to state 7
    FLOAT    shift, and go to state 8
    CHAR     shift, and go to state 9
    FOR      shift, and go to state 19
    IF       shift, and go to state 20
    ID       shift, and go to state 21
    UNARY    shift, and go to state 22
    '}'      shift, and go to state 98

    datatype   go to state 23
    body       go to state 36
    statement  go to state 25


state 96

   21 body: SCANFF @7 '(' STR ',' '&' ID ')' ';' .

    $default  reduce using rule 21 (body)


state 97

   15 body: FOR @5 '(' statement ';' condition ';' statement ')' . '{' body '}'

    '{'  shift, and go to state 99


state 98

   13 body: IF @2 '(' condition ')' @3 '{' body '}' . @4 else

    $default  reduce using rule 12 (@4)

    @4  go to state 100


state 99

   15 body: FOR @5 '(' statement ';' condition ';' statement ')' '{' . body '}'

    VOID     shift, and go to state 6
    PRINTFF  shift, and go to state 17
    SCANFF   shift, and go to state 18
    INT      shift, and go to state 7
    FLOAT    shift, and go to state 8
    CHAR     shift, and go to state 9
    FOR      shift, and go to state 19
    IF       shift, and go to state 20
    ID       shift, and go to state 21
    UNARY    shift, and go to state 22

    datatype   go to state 23
    body       go to state 101
    statement  go to state 25


state 100

   13 body: IF @2 '(' condition ')' @3 '{' body '}' @4 . else

    ELSE  shift, and go to state 102

    $default  reduce using rule 24 (else)

    else  go to state 103


state 101

   15 body: FOR @5 '(' statement ';' condition ';' statement ')' '{' body . '}'
   16     | body . body

    VOID     shift, and go to state 6
    PRINTFF  shift, and go to state 17
    SCANFF   shift, and go to state 18
    INT      shift, and go to state 7
    FLOAT    shift, and go to state 8
    CHAR     shift, and go to state 9
    FOR      shift, and go to state 19
    IF       shift, and go to state 20
    ID       shift, and go to state 21
    UNARY    shift, and go to state 22
    '}'      shift, and go to state 104

    datatype   go to state 23
    body       go to state 36
    statement  go to state 25


state 102

   23 else: ELSE . @8 '{' body '}'

    $default  reduce using rule 22 (@8)

    @8  go to state 105


state 103

   13 body: IF @2 '(' condition ')' @3 '{' body '}' @4 else .

    $default  reduce using rule 13 (body)


state 104

   15 body: FOR @5 '(' statement ';' condition ';' statement ')' '{' body '}' .

    $default  reduce using rule 15 (body)


state 105

   23 else: ELSE @8 . '{' body '}'

    '{'  shift, and go to state 106


state 106

   23 else: ELSE @8 '{' . body '}'

    VOID     shift, and go to state 6
    PRINTFF  shift, and go to state 17
    SCANFF   shift, and go to state 18
    INT      shift, and go to state 7
    FLOAT    shift, and go to state 8
    CHAR     shift, and go to state 9
    FOR      shift, and go to state 19
    IF       shift, and go to state 20
    ID       shift, and go to state 21
    UNARY    shift, and go to state 22

    datatype   go to state 23
    body       go to state 107
    statement  go to state 25


state 107

   16 body: body . body
   23 else: ELSE @8 '{' body . '}'

    VOID     shift, and go to state 6
    PRINTFF  shift, and go to state 17
    SCANFF   shift, and go to state 18
    INT      shift, and go to state 7
    FLOAT    shift, and go to state 8
    CHAR     shift, and go to state 9
    FOR      shift, and go to state 19
    IF       shift, and go to state 20
    ID       shift, and go to state 21
    UNARY    shift, and go to state 22
    '}'      shift, and go to state 108

    datatype   go to state 23
    body       go to state 36
    statement  go to state 25


state 108

   23 else: ELSE @8 '{' body '}' .

    $default  reduce using rule 23 (else)
