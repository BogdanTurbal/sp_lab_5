Terminals which are not used

   ASSIGN
   AND
   OR


State 39 conflicts: 11 shift/reduce
State 92 conflicts: 4 shift/reduce


Grammar

    0 $accept: program $end

    1 program: headers main '(' ')' '{' body return '}'

    2 headers: headers INCLUDE

    3 @1: /* empty */

    4 headers: INCLUDE @1

    5 main: datatype ID

    6 datatype: INT
    7         | VOID
    8         | FLOAT
    9         | CHAR
   10         | error

   11 @2: /* empty */

   12 @3: /* empty */

   13 @4: /* empty */

   14 body: IF @2 '(' condition ')' @3 '{' body '}' @4 else

   15 @5: /* empty */

   16 @6: /* empty */

   17 body: FOR @5 '(' statement ';' condition ';' statement ')' '{' body @6 '}'
   18     | body body

   19 @7: /* empty */

   20 body: PRINTFF @7 '(' STR ')' ';'
   21     | statement ';'

   22 @8: /* empty */

   23 body: SCANFF @8 '(' STR ',' '&' ID ')' ';'

   24 @9: /* empty */

   25 else: ELSE @9 '{' body '}'
   26     | /* empty */

   27 condition: value relop value
   28          | TRUE
   29          | FALSE
   30          | /* empty */

   31 @10: /* empty */

   32 statement: datatype ID @10 init

   33 @11: /* empty */

   34 statement: ID @11 '=' expression

   35 @12: /* empty */

   36 statement: ID @12 relop expression

   37 @13: /* empty */

   38 statement: ID @13 UNARY
   39          | UNARY ID
   40          | error ';'

   41 init: '=' value
   42     | /* empty */

   43 expression: expression arithmetic expression
   44           | value

   45 arithmetic: ADD
   46           | SUBTRACT
   47           | MULTIPLY
   48           | DIVIDE

   49 relop: LT
   50      | GT
   51      | LE
   52      | GE
   53      | EQ
   54      | NE

   55 value: NUMBER
   56      | FLOAT_NUM
   57      | CHARACTER
   58      | ID

   59 @14: /* empty */

   60 return: RETURN @14 value ';'
   61       | /* empty */


Terminals, with rules where they appear

$end (0) 0
'&' (38) 23
'(' (40) 1 14 17 20 23
')' (41) 1 14 17 20 23
',' (44) 23
';' (59) 17 20 21 23 40 60
'=' (61) 34 41
'{' (123) 1 14 17 25
'}' (125) 1 14 17 25
error (256) 10 40
SUBTRACT (258) 46
ADD (259) 45
DIVIDE (260) 48
MULTIPLY (261) 47
NE (262) 54
EQ (263) 53
GE (264) 52
GT (265) 50
LE (266) 51
LT (267) 49
ASSIGN (268)
VOID (269) 7
CHARACTER (270) 57
PRINTFF (271) 20
SCANFF (272) 23
INT (273) 6
FLOAT (274) 8
CHAR (275) 9
FOR (276) 17
IF (277) 14
ELSE (278) 25
TRUE (279) 28
FALSE (280) 29
NUMBER (281) 55
FLOAT_NUM (282) 56
ID (283) 5 23 32 34 36 38 39 58
AND (284)
OR (285)
STR (286) 20 23
UNARY (287) 38 39
INCLUDE (288) 2 4
RETURN (289) 60


Nonterminals, with rules where they appear

$accept (43)
    on left: 0
program (44)
    on left: 1, on right: 0
headers (45)
    on left: 2 4, on right: 1 2
@1 (46)
    on left: 3, on right: 4
main (47)
    on left: 5, on right: 1
datatype (48)
    on left: 6 7 8 9 10, on right: 5 32
body (49)
    on left: 14 17 18 20 21 23, on right: 1 14 17 18 25
@2 (50)
    on left: 11, on right: 14
@3 (51)
    on left: 12, on right: 14
@4 (52)
    on left: 13, on right: 14
@5 (53)
    on left: 15, on right: 17
@6 (54)
    on left: 16, on right: 17
@7 (55)
    on left: 19, on right: 20
@8 (56)
    on left: 22, on right: 23
else (57)
    on left: 25 26, on right: 14
@9 (58)
    on left: 24, on right: 25
condition (59)
    on left: 27 28 29 30, on right: 14 17
statement (60)
    on left: 32 34 36 38 39 40, on right: 17 21
@10 (61)
    on left: 31, on right: 32
@11 (62)
    on left: 33, on right: 34
@12 (63)
    on left: 35, on right: 36
@13 (64)
    on left: 37, on right: 38
init (65)
    on left: 41 42, on right: 32
expression (66)
    on left: 43 44, on right: 34 36 43
arithmetic (67)
    on left: 45 46 47 48, on right: 43
relop (68)
    on left: 49 50 51 52 53 54, on right: 27 36
value (69)
    on left: 55 56 57 58, on right: 27 41 44 60
return (70)
    on left: 60 61, on right: 1
@14 (71)
    on left: 59, on right: 60


state 0

    0 $accept: . program $end

    INCLUDE  shift, and go to state 1

    program  go to state 2
    headers  go to state 3


state 1

    4 headers: INCLUDE . @1

    $default  reduce using rule 3 (@1)

    @1  go to state 4


state 2

    0 $accept: program . $end

    $end  shift, and go to state 5


state 3

    1 program: headers . main '(' ')' '{' body return '}'
    2 headers: headers . INCLUDE

    error    shift, and go to state 6
    VOID     shift, and go to state 7
    INT      shift, and go to state 8
    FLOAT    shift, and go to state 9
    CHAR     shift, and go to state 10
    INCLUDE  shift, and go to state 11

    main      go to state 12
    datatype  go to state 13


state 4

    4 headers: INCLUDE @1 .

    $default  reduce using rule 4 (headers)


state 5

    0 $accept: program $end .

    $default  accept


state 6

   10 datatype: error .

    $default  reduce using rule 10 (datatype)


state 7

    7 datatype: VOID .

    $default  reduce using rule 7 (datatype)


state 8

    6 datatype: INT .

    $default  reduce using rule 6 (datatype)


state 9

    8 datatype: FLOAT .

    $default  reduce using rule 8 (datatype)


state 10

    9 datatype: CHAR .

    $default  reduce using rule 9 (datatype)


state 11

    2 headers: headers INCLUDE .

    $default  reduce using rule 2 (headers)


state 12

    1 program: headers main . '(' ')' '{' body return '}'

    '('  shift, and go to state 14


state 13

    5 main: datatype . ID

    ID  shift, and go to state 15


state 14

    1 program: headers main '(' . ')' '{' body return '}'

    ')'  shift, and go to state 16


state 15

    5 main: datatype ID .

    $default  reduce using rule 5 (main)


state 16

    1 program: headers main '(' ')' . '{' body return '}'

    '{'  shift, and go to state 17


state 17

    1 program: headers main '(' ')' '{' . body return '}'

    error    shift, and go to state 18
    VOID     shift, and go to state 7
    PRINTFF  shift, and go to state 19
    SCANFF   shift, and go to state 20
    INT      shift, and go to state 8
    FLOAT    shift, and go to state 9
    CHAR     shift, and go to state 10
    FOR      shift, and go to state 21
    IF       shift, and go to state 22
    ID       shift, and go to state 23
    UNARY    shift, and go to state 24

    datatype   go to state 25
    body       go to state 26
    statement  go to state 27


state 18

   10 datatype: error .
   40 statement: error . ';'

    ';'  shift, and go to state 28

    $default  reduce using rule 10 (datatype)


state 19

   20 body: PRINTFF . @7 '(' STR ')' ';'

    $default  reduce using rule 19 (@7)

    @7  go to state 29


state 20

   23 body: SCANFF . @8 '(' STR ',' '&' ID ')' ';'

    $default  reduce using rule 22 (@8)

    @8  go to state 30


state 21

   17 body: FOR . @5 '(' statement ';' condition ';' statement ')' '{' body @6 '}'

    $default  reduce using rule 15 (@5)

    @5  go to state 31


state 22

   14 body: IF . @2 '(' condition ')' @3 '{' body '}' @4 else

    $default  reduce using rule 11 (@2)

    @2  go to state 32


state 23

   34 statement: ID . @11 '=' expression
   36          | ID . @12 relop expression
   38          | ID . @13 UNARY

    UNARY     reduce using rule 37 (@13)
    '='       reduce using rule 33 (@11)
    $default  reduce using rule 35 (@12)

    @11  go to state 33
    @12  go to state 34
    @13  go to state 35


state 24

   39 statement: UNARY . ID

    ID  shift, and go to state 36


state 25

   32 statement: datatype . ID @10 init

    ID  shift, and go to state 37


state 26

    1 program: headers main '(' ')' '{' body . return '}'
   18 body: body . body

    error    shift, and go to state 18
    VOID     shift, and go to state 7
    PRINTFF  shift, and go to state 19
    SCANFF   shift, and go to state 20
    INT      shift, and go to state 8
    FLOAT    shift, and go to state 9
    CHAR     shift, and go to state 10
    FOR      shift, and go to state 21
    IF       shift, and go to state 22
    ID       shift, and go to state 23
    UNARY    shift, and go to state 24
    RETURN   shift, and go to state 38

    '}'  reduce using rule 61 (return)

    datatype   go to state 25
    body       go to state 39
    statement  go to state 27
    return     go to state 40


state 27

   21 body: statement . ';'

    ';'  shift, and go to state 41


state 28

   40 statement: error ';' .

    $default  reduce using rule 40 (statement)


state 29

   20 body: PRINTFF @7 . '(' STR ')' ';'

    '('  shift, and go to state 42


state 30

   23 body: SCANFF @8 . '(' STR ',' '&' ID ')' ';'

    '('  shift, and go to state 43


state 31

   17 body: FOR @5 . '(' statement ';' condition ';' statement ')' '{' body @6 '}'

    '('  shift, and go to state 44


state 32

   14 body: IF @2 . '(' condition ')' @3 '{' body '}' @4 else

    '('  shift, and go to state 45


state 33

   34 statement: ID @11 . '=' expression

    '='  shift, and go to state 46


state 34

   36 statement: ID @12 . relop expression

    NE  shift, and go to state 47
    EQ  shift, and go to state 48
    GE  shift, and go to state 49
    GT  shift, and go to state 50
    LE  shift, and go to state 51
    LT  shift, and go to state 52

    relop  go to state 53


state 35

   38 statement: ID @13 . UNARY

    UNARY  shift, and go to state 54


state 36

   39 statement: UNARY ID .

    $default  reduce using rule 39 (statement)


state 37

   32 statement: datatype ID . @10 init

    $default  reduce using rule 31 (@10)

    @10  go to state 55


state 38

   60 return: RETURN . @14 value ';'

    $default  reduce using rule 59 (@14)

    @14  go to state 56


state 39

   18 body: body . body
   18     | body body .

    error    shift, and go to state 18
    VOID     shift, and go to state 7
    PRINTFF  shift, and go to state 19
    SCANFF   shift, and go to state 20
    INT      shift, and go to state 8
    FLOAT    shift, and go to state 9
    CHAR     shift, and go to state 10
    FOR      shift, and go to state 21
    IF       shift, and go to state 22
    ID       shift, and go to state 23
    UNARY    shift, and go to state 24

    error    [reduce using rule 18 (body)]
    VOID     [reduce using rule 18 (body)]
    PRINTFF  [reduce using rule 18 (body)]
    SCANFF   [reduce using rule 18 (body)]
    INT      [reduce using rule 18 (body)]
    FLOAT    [reduce using rule 18 (body)]
    CHAR     [reduce using rule 18 (body)]
    FOR      [reduce using rule 18 (body)]
    IF       [reduce using rule 18 (body)]
    ID       [reduce using rule 18 (body)]
    UNARY    [reduce using rule 18 (body)]
    RETURN   reduce using rule 18 (body)
    '}'      reduce using rule 18 (body)

    datatype   go to state 25
    body       go to state 39
    statement  go to state 27


state 40

    1 program: headers main '(' ')' '{' body return . '}'

    '}'  shift, and go to state 57


state 41

   21 body: statement ';' .

    $default  reduce using rule 21 (body)


state 42

   20 body: PRINTFF @7 '(' . STR ')' ';'

    STR  shift, and go to state 58


state 43

   23 body: SCANFF @8 '(' . STR ',' '&' ID ')' ';'

    STR  shift, and go to state 59


state 44

   17 body: FOR @5 '(' . statement ';' condition ';' statement ')' '{' body @6 '}'

    error  shift, and go to state 18
    VOID   shift, and go to state 7
    INT    shift, and go to state 8
    FLOAT  shift, and go to state 9
    CHAR   shift, and go to state 10
    ID     shift, and go to state 23
    UNARY  shift, and go to state 24

    datatype   go to state 25
    statement  go to state 60


state 45

   14 body: IF @2 '(' . condition ')' @3 '{' body '}' @4 else

    CHARACTER  shift, and go to state 61
    TRUE       shift, and go to state 62
    FALSE      shift, and go to state 63
    NUMBER     shift, and go to state 64
    FLOAT_NUM  shift, and go to state 65
    ID         shift, and go to state 66

    $default  reduce using rule 30 (condition)

    condition  go to state 67
    value      go to state 68


state 46

   34 statement: ID @11 '=' . expression

    CHARACTER  shift, and go to state 61
    NUMBER     shift, and go to state 64
    FLOAT_NUM  shift, and go to state 65
    ID         shift, and go to state 66

    expression  go to state 69
    value       go to state 70


state 47

   54 relop: NE .

    $default  reduce using rule 54 (relop)


state 48

   53 relop: EQ .

    $default  reduce using rule 53 (relop)


state 49

   52 relop: GE .

    $default  reduce using rule 52 (relop)


state 50

   50 relop: GT .

    $default  reduce using rule 50 (relop)


state 51

   51 relop: LE .

    $default  reduce using rule 51 (relop)


state 52

   49 relop: LT .

    $default  reduce using rule 49 (relop)


state 53

   36 statement: ID @12 relop . expression

    CHARACTER  shift, and go to state 61
    NUMBER     shift, and go to state 64
    FLOAT_NUM  shift, and go to state 65
    ID         shift, and go to state 66

    expression  go to state 71
    value       go to state 70


state 54

   38 statement: ID @13 UNARY .

    $default  reduce using rule 38 (statement)


state 55

   32 statement: datatype ID @10 . init

    '='  shift, and go to state 72

    $default  reduce using rule 42 (init)

    init  go to state 73


state 56

   60 return: RETURN @14 . value ';'

    CHARACTER  shift, and go to state 61
    NUMBER     shift, and go to state 64
    FLOAT_NUM  shift, and go to state 65
    ID         shift, and go to state 66

    value  go to state 74


state 57

    1 program: headers main '(' ')' '{' body return '}' .

    $default  reduce using rule 1 (program)


state 58

   20 body: PRINTFF @7 '(' STR . ')' ';'

    ')'  shift, and go to state 75


state 59

   23 body: SCANFF @8 '(' STR . ',' '&' ID ')' ';'

    ','  shift, and go to state 76


state 60

   17 body: FOR @5 '(' statement . ';' condition ';' statement ')' '{' body @6 '}'

    ';'  shift, and go to state 77


state 61

   57 value: CHARACTER .

    $default  reduce using rule 57 (value)


state 62

   28 condition: TRUE .

    $default  reduce using rule 28 (condition)


state 63

   29 condition: FALSE .

    $default  reduce using rule 29 (condition)


state 64

   55 value: NUMBER .

    $default  reduce using rule 55 (value)


state 65

   56 value: FLOAT_NUM .

    $default  reduce using rule 56 (value)


state 66

   58 value: ID .

    $default  reduce using rule 58 (value)


state 67

   14 body: IF @2 '(' condition . ')' @3 '{' body '}' @4 else

    ')'  shift, and go to state 78


state 68

   27 condition: value . relop value

    NE  shift, and go to state 47
    EQ  shift, and go to state 48
    GE  shift, and go to state 49
    GT  shift, and go to state 50
    LE  shift, and go to state 51
    LT  shift, and go to state 52

    relop  go to state 79


state 69

   34 statement: ID @11 '=' expression .
   43 expression: expression . arithmetic expression

    SUBTRACT  shift, and go to state 80
    ADD       shift, and go to state 81
    DIVIDE    shift, and go to state 82
    MULTIPLY  shift, and go to state 83

    $default  reduce using rule 34 (statement)

    arithmetic  go to state 84


state 70

   44 expression: value .

    $default  reduce using rule 44 (expression)


state 71

   36 statement: ID @12 relop expression .
   43 expression: expression . arithmetic expression

    SUBTRACT  shift, and go to state 80
    ADD       shift, and go to state 81
    DIVIDE    shift, and go to state 82
    MULTIPLY  shift, and go to state 83

    $default  reduce using rule 36 (statement)

    arithmetic  go to state 84


state 72

   41 init: '=' . value

    CHARACTER  shift, and go to state 61
    NUMBER     shift, and go to state 64
    FLOAT_NUM  shift, and go to state 65
    ID         shift, and go to state 66

    value  go to state 85


state 73

   32 statement: datatype ID @10 init .

    $default  reduce using rule 32 (statement)


state 74

   60 return: RETURN @14 value . ';'

    ';'  shift, and go to state 86


state 75

   20 body: PRINTFF @7 '(' STR ')' . ';'

    ';'  shift, and go to state 87


state 76

   23 body: SCANFF @8 '(' STR ',' . '&' ID ')' ';'

    '&'  shift, and go to state 88


state 77

   17 body: FOR @5 '(' statement ';' . condition ';' statement ')' '{' body @6 '}'

    CHARACTER  shift, and go to state 61
    TRUE       shift, and go to state 62
    FALSE      shift, and go to state 63
    NUMBER     shift, and go to state 64
    FLOAT_NUM  shift, and go to state 65
    ID         shift, and go to state 66

    $default  reduce using rule 30 (condition)

    condition  go to state 89
    value      go to state 68


state 78

   14 body: IF @2 '(' condition ')' . @3 '{' body '}' @4 else

    $default  reduce using rule 12 (@3)

    @3  go to state 90


state 79

   27 condition: value relop . value

    CHARACTER  shift, and go to state 61
    NUMBER     shift, and go to state 64
    FLOAT_NUM  shift, and go to state 65
    ID         shift, and go to state 66

    value  go to state 91


state 80

   46 arithmetic: SUBTRACT .

    $default  reduce using rule 46 (arithmetic)


state 81

   45 arithmetic: ADD .

    $default  reduce using rule 45 (arithmetic)


state 82

   48 arithmetic: DIVIDE .

    $default  reduce using rule 48 (arithmetic)


state 83

   47 arithmetic: MULTIPLY .

    $default  reduce using rule 47 (arithmetic)


state 84

   43 expression: expression arithmetic . expression

    CHARACTER  shift, and go to state 61
    NUMBER     shift, and go to state 64
    FLOAT_NUM  shift, and go to state 65
    ID         shift, and go to state 66

    expression  go to state 92
    value       go to state 70


state 85

   41 init: '=' value .

    $default  reduce using rule 41 (init)


state 86

   60 return: RETURN @14 value ';' .

    $default  reduce using rule 60 (return)


state 87

   20 body: PRINTFF @7 '(' STR ')' ';' .

    $default  reduce using rule 20 (body)


state 88

   23 body: SCANFF @8 '(' STR ',' '&' . ID ')' ';'

    ID  shift, and go to state 93


state 89

   17 body: FOR @5 '(' statement ';' condition . ';' statement ')' '{' body @6 '}'

    ';'  shift, and go to state 94


state 90

   14 body: IF @2 '(' condition ')' @3 . '{' body '}' @4 else

    '{'  shift, and go to state 95


state 91

   27 condition: value relop value .

    $default  reduce using rule 27 (condition)


state 92

   43 expression: expression . arithmetic expression
   43           | expression arithmetic expression .

    SUBTRACT  shift, and go to state 80
    ADD       shift, and go to state 81
    DIVIDE    shift, and go to state 82
    MULTIPLY  shift, and go to state 83

    SUBTRACT  [reduce using rule 43 (expression)]
    ADD       [reduce using rule 43 (expression)]
    DIVIDE    [reduce using rule 43 (expression)]
    MULTIPLY  [reduce using rule 43 (expression)]
    $default  reduce using rule 43 (expression)

    arithmetic  go to state 84


state 93

   23 body: SCANFF @8 '(' STR ',' '&' ID . ')' ';'

    ')'  shift, and go to state 96


state 94

   17 body: FOR @5 '(' statement ';' condition ';' . statement ')' '{' body @6 '}'

    error  shift, and go to state 18
    VOID   shift, and go to state 7
    INT    shift, and go to state 8
    FLOAT  shift, and go to state 9
    CHAR   shift, and go to state 10
    ID     shift, and go to state 23
    UNARY  shift, and go to state 24

    datatype   go to state 25
    statement  go to state 97


state 95

   14 body: IF @2 '(' condition ')' @3 '{' . body '}' @4 else

    error    shift, and go to state 18
    VOID     shift, and go to state 7
    PRINTFF  shift, and go to state 19
    SCANFF   shift, and go to state 20
    INT      shift, and go to state 8
    FLOAT    shift, and go to state 9
    CHAR     shift, and go to state 10
    FOR      shift, and go to state 21
    IF       shift, and go to state 22
    ID       shift, and go to state 23
    UNARY    shift, and go to state 24

    datatype   go to state 25
    body       go to state 98
    statement  go to state 27


state 96

   23 body: SCANFF @8 '(' STR ',' '&' ID ')' . ';'

    ';'  shift, and go to state 99


state 97

   17 body: FOR @5 '(' statement ';' condition ';' statement . ')' '{' body @6 '}'

    ')'  shift, and go to state 100


state 98

   14 body: IF @2 '(' condition ')' @3 '{' body . '}' @4 else
   18     | body . body

    error    shift, and go to state 18
    VOID     shift, and go to state 7
    PRINTFF  shift, and go to state 19
    SCANFF   shift, and go to state 20
    INT      shift, and go to state 8
    FLOAT    shift, and go to state 9
    CHAR     shift, and go to state 10
    FOR      shift, and go to state 21
    IF       shift, and go to state 22
    ID       shift, and go to state 23
    UNARY    shift, and go to state 24
    '}'      shift, and go to state 101

    datatype   go to state 25
    body       go to state 39
    statement  go to state 27


state 99

   23 body: SCANFF @8 '(' STR ',' '&' ID ')' ';' .

    $default  reduce using rule 23 (body)


state 100

   17 body: FOR @5 '(' statement ';' condition ';' statement ')' . '{' body @6 '}'

    '{'  shift, and go to state 102


state 101

   14 body: IF @2 '(' condition ')' @3 '{' body '}' . @4 else

    $default  reduce using rule 13 (@4)

    @4  go to state 103


state 102

   17 body: FOR @5 '(' statement ';' condition ';' statement ')' '{' . body @6 '}'

    error    shift, and go to state 18
    VOID     shift, and go to state 7
    PRINTFF  shift, and go to state 19
    SCANFF   shift, and go to state 20
    INT      shift, and go to state 8
    FLOAT    shift, and go to state 9
    CHAR     shift, and go to state 10
    FOR      shift, and go to state 21
    IF       shift, and go to state 22
    ID       shift, and go to state 23
    UNARY    shift, and go to state 24

    datatype   go to state 25
    body       go to state 104
    statement  go to state 27


state 103

   14 body: IF @2 '(' condition ')' @3 '{' body '}' @4 . else

    ELSE  shift, and go to state 105

    $default  reduce using rule 26 (else)

    else  go to state 106


state 104

   17 body: FOR @5 '(' statement ';' condition ';' statement ')' '{' body . @6 '}'
   18     | body . body

    error    shift, and go to state 18
    VOID     shift, and go to state 7
    PRINTFF  shift, and go to state 19
    SCANFF   shift, and go to state 20
    INT      shift, and go to state 8
    FLOAT    shift, and go to state 9
    CHAR     shift, and go to state 10
    FOR      shift, and go to state 21
    IF       shift, and go to state 22
    ID       shift, and go to state 23
    UNARY    shift, and go to state 24

    '}'  reduce using rule 16 (@6)

    datatype   go to state 25
    body       go to state 39
    @6         go to state 107
    statement  go to state 27


state 105

   25 else: ELSE . @9 '{' body '}'

    $default  reduce using rule 24 (@9)

    @9  go to state 108


state 106

   14 body: IF @2 '(' condition ')' @3 '{' body '}' @4 else .

    $default  reduce using rule 14 (body)


state 107

   17 body: FOR @5 '(' statement ';' condition ';' statement ')' '{' body @6 . '}'

    '}'  shift, and go to state 109


state 108

   25 else: ELSE @9 . '{' body '}'

    '{'  shift, and go to state 110


state 109

   17 body: FOR @5 '(' statement ';' condition ';' statement ')' '{' body @6 '}' .

    $default  reduce using rule 17 (body)


state 110

   25 else: ELSE @9 '{' . body '}'

    error    shift, and go to state 18
    VOID     shift, and go to state 7
    PRINTFF  shift, and go to state 19
    SCANFF   shift, and go to state 20
    INT      shift, and go to state 8
    FLOAT    shift, and go to state 9
    CHAR     shift, and go to state 10
    FOR      shift, and go to state 21
    IF       shift, and go to state 22
    ID       shift, and go to state 23
    UNARY    shift, and go to state 24

    datatype   go to state 25
    body       go to state 111
    statement  go to state 27


state 111

   18 body: body . body
   25 else: ELSE @9 '{' body . '}'

    error    shift, and go to state 18
    VOID     shift, and go to state 7
    PRINTFF  shift, and go to state 19
    SCANFF   shift, and go to state 20
    INT      shift, and go to state 8
    FLOAT    shift, and go to state 9
    CHAR     shift, and go to state 10
    FOR      shift, and go to state 21
    IF       shift, and go to state 22
    ID       shift, and go to state 23
    UNARY    shift, and go to state 24
    '}'      shift, and go to state 112

    datatype   go to state 25
    body       go to state 39
    statement  go to state 27


state 112

   25 else: ELSE @9 '{' body '}' .

    $default  reduce using rule 25 (else)
